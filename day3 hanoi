#include<iostream>
#include <cmath>
#include <stdlib.h>
#include <cstdlib>
#include <windows.h>


using namespace std;

int towerA[15],towerB[15],towerC[15],movecount=0;
int topA=-1,topB=-1,topC=-1,sizes=15,numd,move_to_win,temp;
bool check;

bool isEmptyA();
bool isEmptyB();
bool isEmptyC();
void menu();
void towergame();
bool moveA_to_b();
bool moveA_to_c();
bool moveb_to_a();
bool moveb_to_c();
bool movec_to_a();
bool movec_to_b();
int pushA(int val);
int pushB(int val);
int pushC(int val);
int popA();
int popB();
int popC();
void SetCursorPosition(char x, char y);
void display();

int main()
{
    menu();
    return 0;
}
void menu()
{
    cout<<"\n\n\n\t\t\t------------------------Tower Of Hanoi Game------------------------\n\n";
    cout<<"\t\t\t\t 1.play game\n";
    cout<<"\t\t\t\t 2.for exiting program\n\n";
    cout<<"\t\t\t\t Enter your choice: ";
    char choice;
    cin>>choice;

    while (choice < '1' || choice > '2')
{
    cout << " \n\n\t\t\t\tPlease enter a choice from numbers 1-2 " << endl;
    cin >> choice;
}
    switch(choice)
    {
    case '1':
       towergame();
    case '2':
       exit(1);
    }
}
void towergame()
{
    cout<<"\n\t\t\t\t Enter number of disc(Maximum number of disk is 8):";
    a:
  cin>>numd;
  system("cls");
    if (numd<=8){
    move_to_win=(pow(2,numd)-1);
    for (int i=numd;i>0;i--)
  {
    pushA(i);
  }
  //system("cls");




  display();

    int ch;
    cin>>ch;

    while(movecount!=move_to_win-1){
    switch(ch)
    {
    case 1:
        if(moveA_to_b()==false)
        {cout<<"\n\t\t\t\tIlligal move";
        movecount++;
        break;}
        else{
        movecount++;
        display();
        cout<<"\n\t\t\t\tnext move";
        break;}
    case 2:
        if(moveA_to_c()==false)
        {cout<<"\n\t\t\t\tIlligal move";
        movecount++;
        break;}
        else{
        movecount++;
        display();
        cout<<"\n\t\t\t\tnext move";
        break;}
    case 3:
        if(moveb_to_a()==false)
        {cout<<"\n\t\t\t\tIlligal move";
        movecount++;
        break;}
        else{
        movecount++;
        display();
        cout<<"\n\t\t\t\tnext move";
        break;}
    case 4:
        if(moveb_to_c()==false)
        {cout<<"\n\t\t\t\tIlligal move";
        movecount++;
        break;}
        else{
        movecount++;
        display();
        cout<<"\n\t\t\t\tnext move";
        break;}
    case 5:
        if(movec_to_a()==false)
        {cout<<"\n\t\t\t\tIlligal move";
        movecount++;
        break;}
        else{
        movecount++;
        display();
        cout<<"\n\t\t\t\tnext move";
        break;}
    case 6:
        if(movec_to_b()==false)
        {cout<<"\n\t\t\t\tIlligal move";
        movecount++;
        break;}
        else{
        movecount++;
        display();
        cout<<"\t\t\t\tnext move";
        break;}
    case 7:
      exit(1);
    }
    cout<<" \n\t\t\t\tEnter your move :";
    cin>>ch;
    }
    system("cls");
    if(movecount<=move_to_win&&movecount!=0)
  {
      for (int i = 0; i < topB; i++)
    {
    if (towerB[i]>towerB[i+1])
    {
            check=true;
    }
        else
            check=false;
    }
    }
    else
    check=false;

    if(movecount<=move_to_win&&movecount!=0){

      for (int i = 0; i < topC; i++)
    {
    if (towerC[i]>towerC[i+1])
    {
            check=true;
    }
        else
            check=false;
    }
  }
  else
    check=false;

    if (check==true)
    {
      cout<<"\t\t\t\t&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n";
        cout<<"\t\t\t\t&Congragulations you have won the game&\n";
        cout<<"\t\t\t\t&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n";

}
    else
    {
      cout<<"\t\t\t\tsorry you have lost the gameS!!!";
    }
}
else {
cout<<"\t\t\t\tinvalid number of disk try again";
goto a;}
}

bool isEmptyA(){
  return (topA < 0);
}

bool isEmptyB(){
  return (topB < 0);
}

bool isEmptyC(){
  return (topC < 0);
}

int pushA(int val) 
{
if(topA>=sizes-1){
      cout<<"\t\t\t\tyou are trying to add to a full tower"<<endl;
      }
    else {
      ++topA;
      towerA[topA]=val;
  }
  return val;
}
int popA() {

    if(isEmptyA()){
   cout<<"\t\t\t\tYou are trying to move from empty tower"<<endl;
   }
   else {
      temp=towerA[topA];
      --topA;
}
  return temp;
}

int pushB(int val) {

  if(topB>=sizes-1){
      cout<<"\t\t\t\tyour move is invalid"<<endl;
      }
    else {
      ++topB;
      towerB[topB]=val;
}
  return val;
}
int popB() {

    if(isEmptyB()){
   cout<<"\t\t\t\tYou are trying to move from empty tower"<<endl;
   }
   else {
      temp=towerB[topB];
      --topB;
}
  return temp;
}

int pushC(int val) {

    if(topC>=sizes-1){
      cout<<"\t\t\t\tyour move is invalid"<<endl;
      }
    else {
      ++topC;
      towerC[topC]=val;
}
  return val;
}
int popC() {

    if(isEmptyC()){
     cout<<"\t\t\t\tYou are trying to move from empty tower"<<endl;
     }
    else {
      temp=towerC[topC];
      --topC;
  }
  return temp;
}

bool moveA_to_b()
{
    if(!isEmptyA()){
  if(isEmptyB()){
    pushB(popA());
    return true;}
  else
  {
    if (towerB[topB]>towerA[topA]){
      pushB(popA());
      return true;}
    else
    return false;
  }}
   else
    cout<<"\t\t\t\tTHE STACK IS EMPTY";
}
bool moveA_to_c()
{
if(!isEmptyA()){
  if(isEmptyC()){
    pushC(popA());
    return true;}
  else
  {
    if (towerC[topC]>towerA[topA]){
      pushC(popA());
      return true;}
    else
    return false;
  }}
   else
    cout<<"\t\t\t\tTHE STACK IS EMPTY";
}
bool moveb_to_a()
{
if(!isEmptyB()){
  if(isEmptyA()){
    pushA(popB());
    return true;}
  else
  {
    if (towerA[topA]>towerB[topB]){
      pushA(popB());
      return true;}
    else
    return false;
  }}
  else
    cout<<"\t\t\t\tTHE STACK IS EMPTY";

}
bool moveb_to_c()
{
if(!isEmptyB()){
  if(isEmptyC()){
    pushC(popB());
    return true;}
  else
  {
    if (towerC[topC]>towerB[topB]){
      pushC(popB());
      return true;}
    else
    return false;
  }}
else
    cout<<"\t\t\t\tTHE STACK IS EMPTY";

}
bool movec_to_a()
{
    if(!isEmptyC()){
  if(isEmptyA()){
    pushA(popC());
    return true;}
  else
  {

    if (towerA[topA]>towerC[topC]){
      pushA(popC());
      return true;}
    else
    return false;
  }}
  else
    cout<<"\t\t\t\tTHE STACK IS EMPTY";
}
bool movec_to_b()
{
if(!isEmptyC()){
  if(isEmptyB()){
    pushB(popC());
    return true;}
  else
  {
    if (towerB[topB]>towerC[topC]){
      pushB(popC());
      return true;}
    else
    return false;
  }}
  else
    cout<<"\t\t\t\tTHE STACK IS EMPTY";
}



void display()
{
      system("cls");
 cout<<"\n\t\t\t\t1.To move from tower A to B\n";
    cout<<"\t\t\t\t2.To move from tower A to c\n";
    cout<<"\t\t\t\t3.To move from tower B to A\n";
    cout<<"\t\t\t\t4.To move from tower B to C\n";
    cout<<"\t\t\t\t5.To move from tower C to A\n";
    cout<<"\t\t\t\t6.To move from tower C to B\n";
  cout<<"\t\t\t\t7.To exit the game\n";


  cout<<" \n\t\t\t\tEnter your move :\n\n\n";
  
  for (int i = topA; i >=0; --i)
  cout<<"\t\t\t\t|   "<<towerA[i]<<"   |\n";
  
  cout<<"\t\t\t\t|_______|\n";
  cout<<"\t\t\t\t    A   \n\n\n\n";
  
  for (int i = topB; i >=0; --i)
  cout<<"\t\t\t\t|   "<<towerB[i]<<"   |\n";
  
  cout<<"\t\t\t\t|_______|\n";
  cout<<"\t\t\t\t    B   \n\n\n\n";
  
  for (int i = topC; i >=0; --i)
  cout<<"\t\t\t\t|   "<<towerC[i]<<"   |\n";
  
  cout<<"\t\t\t\t|_______|\n";
  cout<<"\t\t\t\t    C   \n\n\n\n";
  
}
